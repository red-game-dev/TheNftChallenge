// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AzraelCollateralClaimed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AzraelCollateralClaimed entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AzraelCollateralClaimed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AzraelCollateralClaimed", id.toString(), this);
    }
  }

  static load(id: string): AzraelCollateralClaimed | null {
    return changetype<AzraelCollateralClaimed | null>(
      store.get("AzraelCollateralClaimed", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingId(): BigInt {
    let value = this.get("lendingId");
    return value!.toBigInt();
  }

  set lendingId(value: BigInt) {
    this.set("lendingId", Value.fromBigInt(value));
  }

  get claimedAt(): BigInt {
    let value = this.get("claimedAt");
    return value!.toBigInt();
  }

  set claimedAt(value: BigInt) {
    this.set("claimedAt", Value.fromBigInt(value));
  }
}

export class AzraelLendingStopped extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AzraelLendingStopped entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AzraelLendingStopped must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AzraelLendingStopped", id.toString(), this);
    }
  }

  static load(id: string): AzraelLendingStopped | null {
    return changetype<AzraelLendingStopped | null>(
      store.get("AzraelLendingStopped", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingId(): BigInt {
    let value = this.get("lendingId");
    return value!.toBigInt();
  }

  set lendingId(value: BigInt) {
    this.set("lendingId", Value.fromBigInt(value));
  }

  get stoppedAt(): BigInt {
    let value = this.get("stoppedAt");
    return value!.toBigInt();
  }

  set stoppedAt(value: BigInt) {
    this.set("stoppedAt", Value.fromBigInt(value));
  }
}

export class AzraelLent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AzraelLent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AzraelLent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AzraelLent", id.toString(), this);
    }
  }

  static load(id: string): AzraelLent | null {
    return changetype<AzraelLent | null>(store.get("AzraelLent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value!.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get lentAmount(): i32 {
    let value = this.get("lentAmount");
    return value!.toI32();
  }

  set lentAmount(value: i32) {
    this.set("lentAmount", Value.fromI32(value));
  }

  get lendingId(): BigInt {
    let value = this.get("lendingId");
    return value!.toBigInt();
  }

  set lendingId(value: BigInt) {
    this.set("lendingId", Value.fromBigInt(value));
  }

  get lenderAddress(): Bytes {
    let value = this.get("lenderAddress");
    return value!.toBytes();
  }

  set lenderAddress(value: Bytes) {
    this.set("lenderAddress", Value.fromBytes(value));
  }

  get maxRentDuration(): i32 {
    let value = this.get("maxRentDuration");
    return value!.toI32();
  }

  set maxRentDuration(value: i32) {
    this.set("maxRentDuration", Value.fromI32(value));
  }

  get dailyRentPrice(): Bytes {
    let value = this.get("dailyRentPrice");
    return value!.toBytes();
  }

  set dailyRentPrice(value: Bytes) {
    this.set("dailyRentPrice", Value.fromBytes(value));
  }

  get nftPrice(): Bytes {
    let value = this.get("nftPrice");
    return value!.toBytes();
  }

  set nftPrice(value: Bytes) {
    this.set("nftPrice", Value.fromBytes(value));
  }

  get isERC721(): boolean {
    let value = this.get("isERC721");
    return value!.toBoolean();
  }

  set isERC721(value: boolean) {
    this.set("isERC721", Value.fromBoolean(value));
  }

  get paymentToken(): i32 {
    let value = this.get("paymentToken");
    return value!.toI32();
  }

  set paymentToken(value: i32) {
    this.set("paymentToken", Value.fromI32(value));
  }
}

export class AzraelRented extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AzraelRented entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AzraelRented must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AzraelRented", id.toString(), this);
    }
  }

  static load(id: string): AzraelRented | null {
    return changetype<AzraelRented | null>(store.get("AzraelRented", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingId(): BigInt {
    let value = this.get("lendingId");
    return value!.toBigInt();
  }

  set lendingId(value: BigInt) {
    this.set("lendingId", Value.fromBigInt(value));
  }

  get renterAddress(): Bytes {
    let value = this.get("renterAddress");
    return value!.toBytes();
  }

  set renterAddress(value: Bytes) {
    this.set("renterAddress", Value.fromBytes(value));
  }

  get rentDuration(): i32 {
    let value = this.get("rentDuration");
    return value!.toI32();
  }

  set rentDuration(value: i32) {
    this.set("rentDuration", Value.fromI32(value));
  }

  get rentedAt(): BigInt {
    let value = this.get("rentedAt");
    return value!.toBigInt();
  }

  set rentedAt(value: BigInt) {
    this.set("rentedAt", Value.fromBigInt(value));
  }
}

export class AzraelReturned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AzraelReturned entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AzraelReturned must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AzraelReturned", id.toString(), this);
    }
  }

  static load(id: string): AzraelReturned | null {
    return changetype<AzraelReturned | null>(store.get("AzraelReturned", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingId(): BigInt {
    let value = this.get("lendingId");
    return value!.toBigInt();
  }

  set lendingId(value: BigInt) {
    this.set("lendingId", Value.fromBigInt(value));
  }

  get returnedAt(): BigInt {
    let value = this.get("returnedAt");
    return value!.toBigInt();
  }

  set returnedAt(value: BigInt) {
    this.set("returnedAt", Value.fromBigInt(value));
  }
}
